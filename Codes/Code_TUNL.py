def fTUNL(import_location, export_location, add_data_to_new_file, add_data_to_original_file):        import os    import pandas as pd    from openpyxl import load_workbook    import sys    from tqdm import tqdm        # Define functions for color coding.        def text_color(val):                val = str(val)        if val == 'positive':            color = '#4E7C3E' # Dark green for 'positive'        elif val == 'wrong choice':            color = '#9C1B14' # Dark red for 'wrong choice'        elif val == 'start choice':            color = '#9C5600' # Dark yellow for 'start choice'        elif val == 'start exp':            color = '#FFFFFF' # White for 'start exp'        elif val == 'end exp':            color = '#FFFFFF' # White for 'end exp'                    else:            color = 'black'                    return 'color: %s' % color        def cell_color(val):                val = str(val)        if val == 'positive':            color = '#C3EFCC' # Green for 'positive'        elif val == 'wrong choice':            color = '#FBC4CD' # Red for 'wrong choice'        elif val == 'start choice':            color = '#FCEB9C' # Yellow for 'start choice'        elif val == 'start exp':            color = '#6C2C9D' # Purple for 'start exp'        elif val == 'end exp':            color = '#000000' # Black for 'end exp'            else:            color = 'none'                    return 'background-color: %s' % color        # Create a loop over every excel file in the import location.        import_files = [file for file in os.listdir(import_location) if (file.endswith(".xlsx") and file.startswith("~$")==False)]        for filename in tqdm(import_files, ncols=70):                # Import the excel data                import_name = filename        import_destination = import_location + import_name        export_name = 'Organised ' + import_name        export_destination = export_location + export_name                df = pd.read_excel(import_destination, sheet_name=0, usecols=['DateTime','IdRFID','IdLabel','outLabel','SystemMsg','MsgValue1','MsgValue2','MsgValue3'])        #df = pd.read_excel(import_destination, sheet_name=0, usecols="A,B,C,M,N,O,P,Q")                # Add 'positive' string from column 'outLabel' to column 'SystemMsg'.        for i in range(len(df['outLabel'])):            if df.at[i,'outLabel'] == 'positive':                df.at[i,'SystemMsg'] = df.at[i,'outLabel']                        # Delete rows in the imported data if the entry in column 'SystemMsg' is not 'end exp', 'incorrect', 'omission', 'positive', 'start exp' or 'premature'.        # Delete column M ('outLabel').        # Identify the start and end times of the experiment.                del_indicies = []        start_time = ''        end_time = ''        #list_keywords = ['correct', 'incorrect', 'omission', 'iti', 'premature', 'perseverative', 'present time', 'latency', 'start exp', 'end exp']        list_keywords = ['delay', 'start exp', 'end exp', 'positive', 'start iti', 'right choice', 'wrong choice', 'start choice', 'wait poke']                for i in range(len(df['SystemMsg'])):            if df.at[i,'SystemMsg'] not in list_keywords:                del_indicies.append(i)            if df.at[i,'SystemMsg'] == 'start':                start_time = df.at[i,'DateTime']            if df.at[i,'SystemMsg'] != 'end':                end_time = df.at[i,'DateTime']                        df = df.drop(del_indicies)        df = df.drop(columns=['outLabel'])        df.index = list(range(len(df)))                # Ensure that the DateTime column is in a datetime format and not a string.        if type(df['DateTime'].iloc[0]) == str:            possible_formats = [None, '%d/%m/%Y %H.%M.%S.%f']            for form in possible_formats:                df['DateTime'] = pd.to_datetime(df['DateTime'], format=form, errors='ignore')                if type(df['DateTime'].iloc[0]) != str:                    start_time = pd.to_datetime(start_time, format=form)                    end_time   = pd.to_datetime(end_time, format=form)                    break            if type(df['DateTime'].iloc[0]) == str:                print('A new datetime format needs to be included in the code.')                sys.exit()                        # Sort all the rows by the column 'IdLabel'.        # Within those identical entries in 'IdLabel', sort by the column 'DateTime'.                df = df.sort_values(by=['IdLabel','DateTime'], na_position='last')            # Find the length of the longest session in the file.        # A session is a section from 'start exp' to 'end exp'.        # At the same time, find all unique image positions and if there is no end exp before a start exp, add one in.                best_counter = 0        counter = 0        list_image_positions = []        no_end_exp = []        df.index = list(range(len(df)))                for i in range(len(df['SystemMsg'])):            counter += 1            if df['SystemMsg'].iloc[i] == 'end exp':                if counter > best_counter:                    best_counter = counter                counter = 0                            if (df['SystemMsg'].iloc[i] == 'start choice') and (df['MsgValue1'].iloc[i] not in list_image_positions):                list_image_positions.append(df['MsgValue1'].iloc[i])                            if i!=0 and df['SystemMsg'].iloc[i]=='start exp' and df['SystemMsg'].iloc[i-1]!='end exp':                no_end_exp.append(i-1)        for ind in no_end_exp:            df.loc[ind+0.5] = df.loc[ind]            df.at[ind+0.5,'DateTime'] = np.nan            df.at[ind+0.5,'SystemMsg'] = 'end exp'        df = df.sort_index()        df.index = list(range(len(df)))                # Create the row labels.            tot_headers  = []        tot_values   = []        tot_headers += ['Positive total', 'Start choice total', 'Right choice total', 'Wrong choice total']        tot_values  += [0,0,0,0]        for image in list_image_positions:            for choice in ['Right choice', 'Wrong choice']:                tot_headers += [choice + ' ' + image + ' total']                tot_values  += [0]        tot_headers += ['Right choice with correction total', 'Right choice without correction total',                        'Wrong choice with correction total', 'Wrong choice without correction total',                        'R+W with correction total',          'R+W without correction total', '']        tot_values  += [0,0,0,0,0,0,'']        tot_headers += ['Proportion right choice of R+W (%)','Proportion wrong choice of R+W (%)']        tot_values  += [0,0]        for image in list_image_positions:            for choice in ['right choice', 'wrong choice']:                tot_headers += ['Proportion ' + choice + ' of R+W ' + image + ' (%)']                tot_values  += [0]        tot_headers += ['Proportion right choice of R+W with correction (%)',    'Proportion wrong choice of R+W with correction (%)',                        'Proportion right choice of R+W without correction (%)', 'Proportion wrong choice of R+W without correction (%)']        tot_values  += [0,0,0,0]        tot_headers += ['Total sessions', '']        tot_values  += [0,'']        ind_headers  = tot_headers[:-2] + ['Session length (mins)','']        ind_values   = tot_values.copy()        empty_values = tot_values.copy()                # Organise the sessions in column 'SystemMsg' into separate sheets.            list_labels = []        list_dfs = []        list_cols = []        list_cols_val1 = []        list_cols_time = []        list_titles = []                for i in range(len(df['SystemMsg'])):                        label_name = df['IdLabel'].iloc[i]            system_name = df['SystemMsg'].iloc[i]            msgvalue_name = df['MsgValue1'].iloc[i]            time_name = df['DateTime'].iloc[i]                        # Starting a new rat ID label (in column 'IdLabel').            if (label_name not in list_labels) and (system_name == 'start exp'):                                    time_name = df['DateTime'].iloc[i]                code_name = df['IdRFID'].iloc[i]                list_labels.append(label_name)                                list_dfs.append(pd.DataFrame({'Col 0':[]}))                list_cols.append([])                list_cols_val1.append([])                list_cols_time.append([])                list_titles.append(label_name)                                tot_values  = empty_values.copy()                df_tot_cols = pd.DataFrame({'Names': tot_headers, 'Values': tot_values})                df_tot_cols.index = tot_headers                        # Starting a new session (in column 'SystemMsg').            elif (label_name in list_labels) and (system_name == 'start exp'):                                time_name = df['DateTime'].iloc[i]                list_cols.append([])                list_cols_val1.append([])                list_cols_time.append([])                        # Recording the event (in column 'SystemMsg').            list_cols[-1].append(system_name)            list_cols_val1[-1].append(msgvalue_name)            list_cols_time[-1].append(time_name)                        # Ending a session (in column 'SystemMsg').            if system_name == 'end exp':                                while len(list_cols[-1]) < best_counter:                    list_cols[-1].append('')                    list_cols_val1[-1].append('')                    list_cols_time[-1].append('')                                    # Add data about each session.                ind_values  = empty_values.copy()                df_ind_cols = pd.DataFrame({'Names': ind_headers, 'Values': ind_values})                df_ind_cols.index = ind_headers                                image_position = []                current_right_wrong = ''                                for j in range(len(list_cols[-1])):                                                            if list_cols[-1][j] == 'start choice':                        df_ind_cols.at['Start choice total','Values'] += 1                        df_tot_cols.at['Start choice total','Values'] += 1                        image_position.append(str(list_cols_val1[-1][j]))                    elif list_cols[-1][j] == 'positive':                        df_ind_cols.at['Positive total','Values'] += 1                        df_tot_cols.at['Positive total','Values'] += 1                                            elif list_cols[-1][j] == 'right choice':                        df_ind_cols.at['Right choice total','Values'] += 1                        df_tot_cols.at['Right choice total','Values'] += 1                        df_ind_cols.at['Right choice ' + image_position[-1] + ' total','Values'] += 1                        df_tot_cols.at['Right choice ' + image_position[-1] + ' total','Values'] += 1                        if current_right_wrong == 'wrong choice' and len(image_position)!=1 and image_position[-1]==image_position[-2]:                            df_ind_cols.at['Right choice with correction total', 'Values'] += 1                            df_tot_cols.at['Right choice with correction total', 'Values'] += 1                            df_ind_cols.at['R+W with correction total','Values'] += 1                            df_tot_cols.at['R+W with correction total','Values'] += 1                        else:                            df_ind_cols.at['Right choice without correction total', 'Values'] += 1                            df_tot_cols.at['Right choice without correction total', 'Values'] += 1                            df_ind_cols.at['R+W without correction total','Values'] += 1                            df_tot_cols.at['R+W without correction total','Values'] += 1                        current_right_wrong = 'right choice'                                                elif list_cols[-1][j] == 'wrong choice':                        df_ind_cols.at['Wrong choice total','Values'] += 1                        df_tot_cols.at['Wrong choice total','Values'] += 1                        df_ind_cols.at['Wrong choice ' + image_position[-1] + ' total','Values'] += 1                        df_tot_cols.at['Wrong choice ' + image_position[-1] + ' total','Values'] += 1                        if current_right_wrong == 'wrong choice' and len(image_position)!=1 and image_position[-1]==image_position[-2]:                            df_ind_cols.at['Wrong choice with correction total', 'Values'] += 1                            df_tot_cols.at['Wrong choice with correction total', 'Values'] += 1                            df_ind_cols.at['R+W with correction total','Values'] += 1                            df_tot_cols.at['R+W with correction total','Values'] += 1                        else:                            df_ind_cols.at['Wrong choice without correction total', 'Values'] += 1                            df_tot_cols.at['Wrong choice without correction total', 'Values'] += 1                            df_ind_cols.at['R+W without correction total','Values'] += 1                            df_tot_cols.at['R+W without correction total','Values'] += 1                        current_right_wrong = 'wrong choice'                                        for j in range(len(list_cols[-1])):                    if list_cols[-1][j] == 'start exp':                        temp_time1 = list_cols_time[-1][j]                    elif list_cols[-1][j] == 'end exp':                        temp_time2 = list_cols_time[-1][j]                                len_session = temp_time2 - temp_time1                # Make the session lengths time in minutes.                len_session = len_session.total_seconds() / 60                df_ind_cols.at['Session length (mins)','Values'] = len_session                df_tot_cols.at['Total sessions','Values'] += 1                                # Make the calculations based on the data above.                types_right_wrong = [''] + [' with correction', ' without correction'] + [' '+x for x in list_image_positions]                for phrase in types_right_wrong:                    right = df_ind_cols.at['Right choice' + phrase + ' total','Values']                    wrong = df_ind_cols.at['Wrong choice' + phrase + ' total','Values']                    if (right + wrong) == 0:                        df_ind_cols.at['Proportion right choice of R+W' + phrase + ' (%)','Values'] = 0                        df_ind_cols.at['Proportion wrong choice of R+W' + phrase + ' (%)','Values'] = 0                    else:                        df_ind_cols.at['Proportion right choice of R+W' + phrase + ' (%)','Values'] = (right * 100) / (right + wrong)                        df_ind_cols.at['Proportion wrong choice of R+W' + phrase + ' (%)','Values'] = (wrong * 100) / (right + wrong)                                # Put these statistics above the event data colours.                                list_cols[-1]      = list(df_ind_cols['Values']) + list_cols[-1]                list_cols_val1[-1] = len(df_ind_cols['Values'])*[''] + list_cols_val1[-1]                list_cols_time[-1] = len(df_ind_cols['Values'])*[''] + list_cols_time[-1]                                list_dfs[-1]['Col 0'] = list(df_ind_cols['Names']) + best_counter*['']                list_dfs[-1]['Col '+str(i*3+1)] = list_cols[-1].copy()                list_dfs[-1]['Col '+str(i*3+2)] = list_cols_val1[-1].copy()                list_dfs[-1]['Col '+str(i*3+3)] = list_cols_time[-1].copy()                                # Add the total columns.                if i==len(df['SystemMsg'])-1 or ((df['IdLabel'].iloc[i+1] not in list_labels) and (df['SystemMsg'].iloc[i+1] == 'start exp')):                                        # Finish the calculations.                    for phrase in types_right_wrong:                        right = df_tot_cols.at['Right choice' + phrase + ' total','Values']                        wrong = df_tot_cols.at['Wrong choice' + phrase + ' total','Values']                        if (right + wrong) == 0:                            df_tot_cols.at['Proportion right choice of R+W' + phrase + ' (%)','Values'] = 0                            df_tot_cols.at['Proportion wrong choice of R+W' + phrase + ' (%)','Values'] = 0                        else:                            df_tot_cols.at['Proportion right choice of R+W' + phrase + ' (%)','Values'] = (right * 100) / (right + wrong)                            df_tot_cols.at['Proportion wrong choice of R+W' + phrase + ' (%)','Values'] = (wrong * 100) / (right + wrong)                                        # Add the total section.                    list_dfs[-1]['Col '+str(i*3+4)] = list(df_tot_cols['Names']) + best_counter*['']                    list_dfs[-1]['Col '+str(i*3+5)] = list(df_tot_cols['Values']) + best_counter*['']            # Color code the entries that came from column 'SystemMsg'.        # This uses the rules in the functions at the top of the code.                df_export = df.style.applymap(text_color, subset = ['SystemMsg', 'MsgValue1']).applymap(cell_color, subset = ['SystemMsg', 'MsgValue1'])                list_dfs_export = list_dfs.copy()        for i in range(len(list_dfs)):            list_dfs_export[i] = list_dfs[i].style.applymap(text_color, subset = pd.IndexSlice[len(tot_headers):, list(list_dfs[i].columns.values)[1:-2]]).applymap(cell_color, subset = pd.IndexSlice[len(tot_headers):, list(list_dfs[i].columns.values)[1:-2]])            #list_dfs_export[i] = list_dfs[i].style.applymap(text_color).applymap(cell_color).applymap(bold_titles,subset=[''])            # Change the existing data.                if add_data_to_new_file == True:                    with pd.ExcelWriter(export_destination) as writer:                df_export.to_excel(writer, sheet_name='Overall sheet', engine='openpyxl', index=False)                for i in range(len(list_dfs_export)):                    list_dfs_export[i].to_excel(writer, sheet_name=str(list_titles[i]), engine='openpyxl', index=False, header=False)                          elif add_data_to_original_file == True:                        with pd.ExcelWriter(import_destination, mode='a', engine='openpyxl') as writer:                df_export.to_excel(writer, sheet_name='Overall sheet', engine='openpyxl', index=False)                for i in range(len(list_dfs_export)):                    list_dfs_export[i].to_excel(writer, sheet_name=str(list_titles[i]), engine='openpyxl', index=False, header=False)            os.rename(import_destination, import_location + 'Organised ' + filename)# Uncomment this section below to run the code manually.# import_location = 'C:/Users/hazza/Desktop/Phenosys data/Import folder/'# export_location = 'C:/Users/hazza/Desktop/Phenosys data/Export folder/'# add_data_to_new_file = True# add_data_to_original_file = False# fTUNL(import_location, export_location, add_data_to_new_file, add_data_to_original_file)